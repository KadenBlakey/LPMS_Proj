model TomMac
uses "mmxprs"

declarations
  NQuarters = 4
  Quarters = 1..NQuarters

  Products: set of string
  Varieties: set of string
  Contents: set of string

  ProductReduction: array(Products) of real
  OtherIngredientFactor: array(Products) of real
  OtherIngredientCost: array(Products) of real
  ProductionCost: array(Products) of real
  TomatoProperties: array(Contents, Varieties) of real
  ProductProperties: array(Contents, Products) of real

  StorageCost: real
  WarehouseSize: real


  PeriodNames: array(Quarters) of string
  TomatoSupply: array(Varieties, Quarters) of real
  TomatoCost: array(Varieties, Quarters) of real

  Demand: array(Products) of real
  SalePrice: array(Products) of real

  Contract: array(Products) of real
  ContractPrice: array(Products) of real

  ProductionLimit: array(Products) of real



  Tomatoes: array(Varieties, Products, Quarters) of mpvar
  Sell: array(Products, Quarters) of mpvar

  Stock: array(Products, Quarters) of mpvar


  NewWarehouseSize: real
  NewWarehouseCost: real
  NewProductionCost: real
  NewProductionIncrease: real

  PriceChange: real
  DemandChange: real
  ProductionCostChange: real

  NewContract: array(Products) of real
  NewContractPrice: array(Products) of real


  MixUses: array(Products, Quarters, Contents) of mpvar
end-declarations

initialisations from "TomMac.dat"
  Products Varieties Contents ProductReduction OtherIngredientFactor OtherIngredientCost
  ProductionCost TomatoProperties ProductProperties StorageCost WarehouseSize NewWarehouseSize NewWarehouseCost
  NewProductionCost NewProductionIncrease
end-initialisations

initialisations from "TomMacQuarters.dat"
  PeriodNames TomatoSupply TomatoCost Demand SalePrice Contract ContractPrice ProductionLimit NewContract
  NewContractPrice
end-initialisations

initialisations from "TomMacPlan.dat"
  PriceChange DemandChange ProductionCostChange
end-initialisations

forward procedure Report

! Contract + Demand constraints on sold product
forall(p in Products, q in Quarters) do
  ContractCS(p, q) := Sell(p, q) >= Contract(p)
  DemandCS(p, q) := Sell(p, q) <= Demand(p)+Contract(p)
end-do
! Supply constraints on tomatoes
forall(q in Quarters, v in Varieties) do
  SupplyCS(v, q) := sum(p in Products) Tomatoes(v, p, q) <= TomatoSupply(v, q)
end-do



! Mix constraints for creating product
forall(p in Products, q in Quarters) do
  Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)
  forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = Mix(p, q)*ProductProperties(c, p)
  Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
  MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)
end-do





! Stock and stock constraints
forall(p in Products, q in Quarters) do
	if q = 1 then
		InventoryCS(p, q) := Stock(p, q) = Stock(p, NQuarters) + Make(p, q) - Sell(p, q)
	else
		InventoryCS(p, q) := Stock(p, q) = Stock(p, q-1)     + Make(p, q) - Sell(p, q)
	end-if
end-do

forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize
end-do


! Quarterly costs, incomes and profits
forall(q in Quarters) do
  TomCost(q) := sum(v in Varieties, p in Products) TomatoCost(v, q) * Tomatoes(v, p, q)
  ProdCost(q) := sum(p in Products) Make(p, q)*ProductionCost(p)
  OtherProdCost(q) := sum(p in Products) OtherIngredientFactor(p)*ProductReduction(p)*Mix(p, q)*OtherIngredientCost(p)
  WarehouseCost(q) := SpaceUsed(q) * StorageCost


  PeriodCost(q) := ProdCost(q) + OtherProdCost(q) + WarehouseCost(q) + TomCost(q)
  PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p))*SalePrice(p) + ContractPrice(p)*Contract(p))


  PeriodProfit(q) := PeriodIncome(q) - PeriodCost(q)
end-do


TotalCost := sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost



maximise(TotalProfit)

Report


procedure Report
writeln
writeln("Optimal objective £", getsol(TotalProfit))
writeln("Cost £", getsol(TotalCost))
writeln("Income £", getsol(TotalIncome))

forall(p in Products) do
	writeln
	writeln(p, ":")
	forall(q in Quarters) do
		write("In ", PeriodNames(q), ": ")
		write("make ", strfmt(getsol(Make(p, q)),8), "; ")
		write("stock ", strfmt(getsol(Stock(p, q)),8), "; ")
		write("sell ", strfmt(getsol(Sell(p, q)),8), "; ")
		writeln
	end-do
end-do




writeln
forall(p in Products) do
  writeln(p)
  write(strfmt("Use",12)," | ")
  forall(q in Quarters) write(strfmt(PeriodNames(q), 12), " | ")
  writeln
  forall(v in Varieties) do
    write(strfmt(v, 12), " | ")
    forall(q in Quarters) do
    write(strfmt(getsol(Tomatoes(v, p, q)),12), " | ")
    end-do
    writeln
  end-do
  writeln
end-do



forall(v in Varieties, q in Quarters) do
  Slack := getslack(SupplyCS(v, q))
  writeln(strfmt(PeriodNames(q), 8))
  writeln(strfmt(v, 8))
  if Slack = 0 then
    writeln("Tomato availability limit reached; marginal value of variety is £", strfmt(getdual(SupplyCS(v, q)),8,2))
  else
    writeln("Tomato availability limit not reached")
  end-if
end-do

forall(p in Products, q in Quarters) do
  writeln("In ",strfmt(PeriodNames(q),8))
  Slack := getslack(ContractCS(p,q))
  if Slack = 0 then
    writeln("Manufacture of ", strfmt(p, 8), " matches contract; value of breaking contract is £",
    strfmt(getdual(ContractCS(p,q)), 8,2))
  else
    writeln("Manufacture of ", strfmt(p, 8), " exceeds contract")
  end-if

  Slack := getslack(DemandCS(p,q))
  if Slack = 0 then
    writeln("Manufacture of ", strfmt(p, 8), " is limited by demand; value of increasing demand is £",
    strfmt(getdual(DemandCS(p,q)), 8,2))
  else
    writeln("Manufacture of ", strfmt(p, 8), " not limited by demand")
  end-if


  Slack := getslack(MakeCS(p,q))
  if Slack = 0 then
    writeln("Manufacture of ", strfmt(p, 8), " is limited by production limit; value of increasing production limit is £",
    strfmt(getdual(MakeCS(p,q)), 8,2))
  else
    writeln("Manufacture of ", strfmt(p, 8), " not limited by production limit")
  end-if

end-do


forall(q in Quarters) do
  writeln("In ",strfmt(PeriodNames(q),8))
  Slack := getslack(WarehouseCS(q))
  if Slack = 0 then
    writeln("Warehouse filled; value of increasing warehouse size is £",
    strfmt(getdual(WarehouseCS(q)), 8,2))
  else
    writeln("Warehouse not filled")
  end-if
end-do

end-procedure

fopen("TomMac_BaseCase.csv", F_OUTPUT)
! Write profits, costs and incomes
forall(q in Quarters) do
  write(PeriodNames(q),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodIncome(q)),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodCost(q)),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodProfit(q)),", ")
end-do
writeln
! Write overall tomato amounts
writeln
forall(v in Varieties) do
forall(q in Quarters) do
  write(getsol(sum(p in Products) Tomatoes(v, p, q)), ", ")
end-do
writeln
end-do
writeln

! Write product productions
writeln("Make, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Make(p,q)),", ")
end-do
writeln
end-do
! Write product stocks
writeln("Stock, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Stock(p,q)),", ")
end-do
writeln
end-do
! Write product sales
writeln("Sell, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Sell(p,q)),", ")
end-do
writeln
end-do

! Write tomato amounts per product
writeln
forall(q in Quarters) do
  write(" ",", ",PeriodNames(q))
  writeln
  write(" ",", ")
  forall(p in Products) do
    write(p,",")
  end-do
  writeln
  forall(v in Varieties) do
    write(v,",")
    forall(p in Products) do
      write(getsol(Tomatoes(v,p,q)),", ")
    end-do
    writeln
  end-do
  writeln
end-do
fclose(F_OUTPUT)


! ---------------------------------------------------------------------------------------------------------

! Strategic Decisions
writeln
writeln("Strategic decisions")

! Base

! Update sale prices by +20%
! Update production costs by +5%
! Update demand 0%
forall(p in Products) do
  SalePriceNew(p) := SalePrice(p) * (1+PriceChange/100)
  ContractPriceNew(p) := (ContractPrice(p)) * (1+PriceChange/100)
  NewContractPriceNew(p) := (NewContractPrice(p)) * (1+PriceChange/100)
  ProductionCostNew(p) := ProductionCost(p) * (1+ProductionCostChange/100)
  DemandNew(p) := Demand(p) * (1+DemandChange/100)
end-do





forall(q in Quarters) do
  TomCost(q) := sum(v in Varieties, p in Products) TomatoCost(v, q) * Tomatoes(v, p, q)
  ProdCost(q) := sum(p in Products) Make(p, q)*ProductionCostNew(p)
  OtherProdCost(q) := sum(p in Products) OtherIngredientFactor(p)*ProductReduction(p)*Mix(p, q)*OtherIngredientCost(p)
  WarehouseCost(q) := SpaceUsed(q) * StorageCost


  PeriodCost(q) := ProdCost(q) + OtherProdCost(q) + WarehouseCost(q) + TomCost(q)
  PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p))*SalePriceNew(p) + ContractPriceNew(p)*Contract(p))
end-do
TotalCost := sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New base")
writeln("Optimal objective £", getsol(TotalProfit))

! 1 = new warehouse
! 2 = new contract
! 3 = new production


! None - £48325.28612

! 1 only - £49937.47448
forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize + NewWarehouseSize
end-do
TotalCost := NewWarehouseCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New warehouse only")
writeln("Optimal objective £", getsol(TotalProfit))

! 2 only - INFEASIBLE
forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize
end-do


forall(p in Products, q in Quarters) do
  ContractCS(p, q) := Sell(p, q) >= Contract(p) + NewContract(p)
  DemandCS(p, q) := Sell(p, q) <= Demand(p)+Contract(p)+NewContract(p)
end-do


forall(q in Quarters) do
  PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p)-NewContract(p))*SalePriceNew(p) + ContractPriceNew(p)*Contract(p) + NewContractPriceNew(p)*NewContract(p))
end-do


TotalCost := sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New contract only")
writeln("Optimal objective £", getsol(TotalProfit))

! 3 only - £48316.75079
forall(p in Products, q in Quarters) do
  ContractCS(p, q) := Sell(p, q) >= Contract(p)
  DemandCS(p, q) := Sell(p, q) <= Demand(p)+Contract(p)
end-do

forall(p in Products) do
  ContractPriceNew(p) := ContractPrice(p) * (1+PriceChange/100)
end-do


forall(q in Quarters) do
  PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p))*SalePriceNew(p) + ContractPriceNew(p)*Contract(p))
end-do

! Mix constraints for creating product
forall(p in Products, q in Quarters) do
  Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)
  forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = Mix(p, q)*ProductProperties(c, p)
  Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
  MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)*(1+NewProductionIncrease/100)
end-do



TotalCost := NewProductionCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New production only")
writeln("Optimal objective £", getsol(TotalProfit))

! 1 and 3 - £49848.50914
forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize + NewWarehouseSize
end-do
TotalCost := NewWarehouseCost + NewProductionCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New warehouse and new production")
writeln("Optimal objective £", getsol(TotalProfit))



! 1 and 2 - £52020.25747
forall(p in Products, q in Quarters) do
  Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)
  forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = Mix(p, q)*ProductProperties(c, p)
  Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
  MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)
end-do



forall(p in Products, q in Quarters) do
  ContractCS(p, q) := Sell(p, q) >= Contract(p) + NewContract(p)
  DemandCS(p, q) := Sell(p, q) <= Demand(p)+Contract(p)+NewContract(p)
end-do


forall(q in Quarters) do
  PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p)-NewContract(p))*SalePriceNew(p) + ContractPriceNew(p)*Contract(p) + NewContractPriceNew(p)*NewContract(p))
end-do


TotalCost := NewWarehouseCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New warehouse and new contract")
writeln("Optimal objective £", getsol(TotalProfit))

! 2 and 3 - INFEASIBLE
forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize
end-do


forall(p in Products, q in Quarters) do
  Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)
  forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = Mix(p, q)*ProductProperties(c, p)
  Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
  MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)*(1+NewProductionIncrease/100)
end-do


TotalCost := NewProductionCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New contract and new production")
writeln("Optimal objective £", getsol(TotalProfit))

! 1 and 2 and 3 - £158740.8082

forall(q in Quarters) do
	SpaceUsed(q) := sum(p in Products) Stock(p, q)
	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize + NewWarehouseSize
end-do


TotalCost := NewWarehouseCost + NewProductionCost + sum(q in Quarters) PeriodCost(q)
TotalIncome := sum(q in Quarters) PeriodIncome(q)

TotalProfit := TotalIncome - TotalCost


maximise(TotalProfit)


writeln
writeln("New warehouse and new contract and new production")
writeln("Optimal objective £", getsol(TotalProfit))


! best is all decisions
! Update sale prices by +20%
  forall(p in Products) do
    SalePriceNew(p) := SalePrice(p) * (1+PriceChange/100)
    ContractPriceNew(p) := (ContractPrice(p)) * (1+PriceChange/100)
    NewContractPriceNew(p) := (NewContractPrice(p)) * (1+PriceChange/100)
  end-do
! Update production costs by +5%
  forall(p in Products) do
    ProductionCostNew(p) := ProductionCost(p) * (1+ProductionCostChange/100)
  end-do




  ! Contract + Demand constraints on sold product
  forall(p in Products, q in Quarters) do
    ContractCS(p, q) := Sell(p, q) >= Contract(p) + NewContract(p)
    DemandCS(p, q) := Sell(p, q) <= DemandNew(p)+Contract(p)+NewContract(p)
  end-do
  ! Supply constraints on tomatoes
  forall(q in Quarters, v in Varieties) do
    SupplyCS(v, q) := sum(p in Products) Tomatoes(v, p, q) <= TomatoSupply(v, q)
  end-do


  ! Mix constraints
  forall(p in Products, q in Quarters) do
    Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)
    forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = Mix(p, q)*ProductProperties(c, p)
    Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
    MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)*(1+NewProductionIncrease/100)
  end-do


  ! Stock and stock constraints
  forall(p in Products, q in Quarters) do
  	if q = 1 then
  		InventoryCS(p, q) := Stock(p, q) = Stock(p, NQuarters) + Make(p, q) - Sell(p, q)
  	else
  		InventoryCS(p, q) := Stock(p, q) = Stock(p, q-1)     + Make(p, q) - Sell(p, q)
  	end-if
  end-do

  forall(q in Quarters) do
  	SpaceUsed(q) := sum(p in Products) Stock(p, q)
  	WarehouseCS(q) := SpaceUsed(q) <= WarehouseSize + NewWarehouseSize
  end-do


  ! Quarterly costs, incomes and profits
  forall(q in Quarters) do
    TomCost(q) := sum(v in Varieties, p in Products) TomatoCost(v, q) * Tomatoes(v, p, q)
    ProdCost(q) := sum(p in Products) Make(p, q)*ProductionCostNew(p)
    OtherProdCost(q) := sum(p in Products) OtherIngredientFactor(p)*ProductReduction(p)*Mix(p, q)*OtherIngredientCost(p)
    WarehouseCost(q) := SpaceUsed(q) * StorageCost


    PeriodCost(q) := ProdCost(q) + OtherProdCost(q) + WarehouseCost(q) + TomCost(q)
    PeriodIncome(q) := sum(p in Products) ((Sell(p, q) - Contract(p)-NewContract(p))*SalePriceNew(p) + ContractPriceNew(p)*Contract(p) + NewContractPriceNew(p)*NewContract(p))


    PeriodProfit(q) := PeriodIncome(q) - PeriodCost(q)
  end-do


  TotalCost := NewWarehouseCost + NewProductionCost + sum(q in Quarters) PeriodCost(q)
  TotalIncome := sum(q in Quarters) PeriodIncome(q)

  TotalProfit := TotalIncome - TotalCost



  maximise(TotalProfit)

  Report




fopen("TomMac_NewCase.csv", F_OUTPUT)
! Write profits, costs and incomes
forall(q in Quarters) do
  write(PeriodNames(q),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodIncome(q)),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodCost(q)),", ")
end-do
writeln
forall(q in Quarters) do
  write(getsol(PeriodProfit(q)),", ")
end-do
writeln
! Write overall tomato amounts
writeln
forall(v in Varieties) do
forall(q in Quarters) do
  write(getsol(sum(p in Products) Tomatoes(v, p, q)), ", ")
end-do
writeln
end-do
writeln

! Write product productions
writeln("Make, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Make(p,q)),", ")
end-do
writeln
end-do
! Write product stocks
writeln("Stock, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Stock(p,q)),", ")
end-do
writeln
end-do
! Write product sales
writeln("Sell, ")
forall(q in Quarters) do
writeln(PeriodNames(q),", ")
forall(p in Products) do
  write(p,", ")
end-do
writeln
forall(p in Products) do
  write(getsol(Sell(p,q)),", ")
end-do
writeln
end-do

! Write tomato amounts per product
writeln
forall(q in Quarters) do
  write(" ",", ",PeriodNames(q))
  writeln
  write(" ",", ")
  forall(p in Products) do
    write(p,",")
  end-do
  writeln
  forall(v in Varieties) do
    write(v,",")
    forall(p in Products) do
      write(getsol(Tomatoes(v,p,q)),", ")
    end-do
    writeln
  end-do
  writeln
end-do
fclose(F_OUTPUT)



! ------------------------------------------------------------------------------
! Vary mix properties

fopen("TomMacVaryMix.csv", F_OUTPUT)
mu := 0.0

repeat
  write(mu,", ")
  forall(p in Products, q in Quarters) do
    Mix(p, q) := sum(v in Varieties) Tomatoes(v, p, q)

    forall(c in Contents) MixLB(p,q,c) := MixUses(p,q,c) >= Mix(p, q)*(ProductProperties(c, p)-mu)
    forall(c in Contents) MixUB(p,q,c) := MixUses(p,q,c) <= Mix(p, q)*(ProductProperties(c, p)+mu)

    forall(c in Contents) MixCS(p, q, c) := sum(v in Varieties) TomatoProperties(c, v) * Tomatoes(v, p, q) = MixUses(p,q,c)



    Make(p, q) := (1 + OtherIngredientFactor(p))*ProductReduction(p)*Mix(p, q)
    MakeCS(p, q) := Make(p, q) <= ProductionLimit(p)*(1+NewProductionIncrease/100)
  end-do


  maximise(TotalProfit)

  write(getsol(TotalProfit),", ")
  writeln


  mu := mu+0.001

until mu > 0.02
fclose(F_OUTPUT)


end-model
